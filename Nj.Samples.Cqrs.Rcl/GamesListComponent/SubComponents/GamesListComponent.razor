@* This file is copyright © 2022 Dnj.Colab repository authors.

Dnj.Colab content is distributed as free software: you can redistribute it and/or modify it under the terms of the General Public License version 3 as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Dnj.Colab content is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the General Public License version 3 for more details.

You should have received a copy of the General Public License version 3 along with this repository. If not, see <https://github.com/smaicas-org/Dnj.Colab/blob/dev/LICENSE>. *@
@namespace Nj.Samples.Cqrs.RCL
@using Nj.Samples.Cqrs.RCL.ViewModels
@using Nj.Samples.Cqrs.RCL.Models
@inherits ComponentBase

<div class="container">
    <div class="row">
        <div class="col-12">
            <label for="item-title" class="fw-bold">Título</label>
            <input id="item-title" type="text" @bind="GamesComponentVm.CurrentGame.Title" class="form-control"/>
            @if (GamesComponentVm.HasErrors)
            {
                <div class="text-danger">@GamesComponentVm.GetErrorsDisplay(nameof(GamesComponentVm.CurrentGame.Title))</div>
            }
        </div>
        <div class="col-12">
            <label for="item-genre" class="fw-bold">Género</label>
            <input id="item-genre" type="text" @bind="GamesComponentVm.CurrentGame.Genre" class="form-control"/>
            @if (GamesComponentVm.HasErrors)
            {
                <div class="text-danger">@GamesComponentVm.GetErrorsDisplay(nameof(GamesComponentVm.CurrentGame.Genre))</div>
            }
        </div>
        <div class="col-12">
            <label for="item-platform" class="fw-bold">Plataforma</label>
            <input id="item-platform" type="text" @bind="GamesComponentVm.CurrentGame.Platform" class="form-control"/>
            @if (GamesComponentVm.HasErrors)
            {
                <div class="text-danger">@GamesComponentVm.GetErrorsDisplay(nameof(GamesComponentVm.CurrentGame.Platform))</div>
            }
        </div>
        <div class="col-12">
            <label for="item-releasedate" class="fw-bold">Fecha de lanzamiento</label>
            <input id="item-releasedate" type="date" @bind="GamesComponentVm.CurrentGame.ReleaseDate" class="form-control"/>
            @if (GamesComponentVm.HasErrors)
            {
                <div class="text-danger">@GamesComponentVm.GetErrorsDisplay(nameof(GamesComponentVm.CurrentGame.ReleaseDate))</div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <input type="button" value="Crear/Actualizar" class="btn-success" @onclick="async () => await CreateGame()"/>
        </div>
    </div>
    <hr/>
    <div class="row">
        <table>
            <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Platform</th>
                <th>Genre</th>
                <th>ReleaseDate</th>
                <th colspan="2"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var dto in GamesComponentVm.Games)
            {
                <tr>
                    <td>@dto.Id</td>
                    <td>@dto.Title</td>
                    <td>@dto.Platform</td>
                    <td>@dto.Genre</td>
                    <td>@dto.ReleaseDate</td>
                    <td>
                        <input type="button" class="btn-info" value="Edit" @onclick="async () => await EditGame(dto)"/>
                    </td>
                    <td>
                        <input type="button" class="btn-danger" value="Delete" @onclick="async () => await DeleteGame(dto)"/>
                    </td>
                </tr>
            }
            </tbody>
        </table>

    </div>
</div>

@code {

    [CascadingParameter(Name = "ViewModel")]
    public IGamesComponentVm GamesComponentVm { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GamesComponentVm.GetAllGames();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CreateGame()
    {
        await GamesComponentVm.CreateGame();
    }

    private async Task DeleteGame(GameDto dto)
    {
        await GamesComponentVm.DeleteGame(dto);
    }

    private async Task EditGame(GameDto dto)
    {
        await GamesComponentVm.EditGame(dto);
    }

}